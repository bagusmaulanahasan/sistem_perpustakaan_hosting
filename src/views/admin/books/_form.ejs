<div class="grid grid-cols-1 md:grid-cols-2 gap-6">
    <div>
        <div class="mb-4">
            <label for="title" class="block text-sm font-medium text-gray-700">Judul Buku <span class="text-red-500">*</span></label>
            <input type="text" name="title" id="title" value="<%= book ? book.title : '' %>" required class="input-field">
        </div>
        <div class="mb-4">
            <label for="author" class="block text-sm font-medium text-gray-700">Penulis <span class="text-red-500">*</span></label>
            <input type="text" name="author" id="author" value="<%= book ? book.author : '' %>" required class="input-field">
        </div>
        <div class="mb-4">
            <label for="publisher" class="block text-sm font-medium text-gray-700">Penerbit <span class="text-red-500">*</span></label>
            <input type="text" name="publisher" id="publisher" value="<%= book ? book.publisher : '' %>" required class="input-field">
        </div>
    </div>
    <div>
        <div class="mb-4">
            <label for="publication_year" class="block text-sm font-medium text-gray-700">Tahun Terbit <span class="text-red-500">*</span></label>
            <input type="number" name="publication_year" id="publication_year" value="<%= book ? book.publication_year : '' %>" required class="input-field">
        </div>
        <div class="mb-4">
            <label for="stock" class="block text-sm font-medium text-gray-700">Stok <span class="text-red-500">*</span></label>
            <input type="number" name="stock" id="stock" value="<%= book ? book.stock : '0' %>" required class="input-field">
        </div>
        <div class="mb-4">
            <label for="category_id" class="block text-sm font-medium text-gray-700">Kategori <span class="text-red-500">*</span></label>
            <select name="category_id" id="category_id" class="input-field" required>
                <option value="">Pilih Kategori</option>
                <% categories.forEach(cat => { %>
                    <option value="<%= cat.id %>" <%= (book && book.category_id === cat.id) ? 'selected' : '' %>>
                        <%= cat.name %>
                    </option>
                <% }) %>
            </select>
        </div>
    </div>
</div>
<div class="mt-4 border-t pt-6">
    <label for="cover_image" class="block text-sm font-medium text-gray-700">Sampul Buku <span class="text-red-500">*</span></label>
    <input type="file" name="cover_image" id="cover_image" accept="image/*" required class="mt-1 block w-full text-sm text-gray-500
        file:mr-4 file:py-2 file:px-4
        file:rounded-full file:border-0
        file:text-sm file:font-semibold
        file:bg-indigo-50 file:text-indigo-700
        hover:file:bg-indigo-100"
    >
    <p id="fileError" class="text-sm text-red-600 mt-1"></p>
    
    <div class="mt-4">
        <p class="text-xs text-gray-500 mb-2">Preview:</p>
        <img id="imagePreview" src="<%= book && book.cover_image_url ? book.cover_image_url : '#' %>" alt="Preview Sampul" class="w-32 h-auto <%= book && book.cover_image_url ? '' : 'hidden' %> bg-gray-100 rounded shadow-sm">
    </div>
</div>

<script>
    const coverImageInput = document.getElementById('cover_image');
    const imagePreview = document.getElementById('imagePreview');
    const fileError = document.getElementById('fileError');

    coverImageInput.addEventListener('change', function() {
        
        fileError.textContent = '';

        const file = this.files[0];
        if (file) {
            
            const allowedTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp'];
            if (!allowedTypes.includes(file.type)) {
                fileError.textContent = 'Tipe file tidak valid. Harap pilih file gambar.';
                this.value = ''; 
                imagePreview.classList.add('hidden');
                return;
            }

            
            const maxSizeInBytes = 2 * 1024 * 1024;
            if (file.size > maxSizeInBytes) {
                fileError.textContent = 'Ukuran file terlalu besar. Maksimal 2MB.';
                this.value = ''; 
                imagePreview.classList.add('hidden');
                return;
            }

            
            const reader = new FileReader();
            imagePreview.classList.remove('hidden');
            
            reader.addEventListener('load', function() {
                imagePreview.setAttribute('src', this.result);
            });
            
            reader.readAsDataURL(file);
        } else {
            imagePreview.classList.add('hidden');
            imagePreview.setAttribute('src', '#');
        }
    });
</script>

<style>
    .input-field {
        margin-top: 0.25rem;
        display: block;
        width: 100%;
        padding: 0.5rem 0.75rem;
        border-radius: 0.375rem;
        border: 1px solid #D1D5DB;
        box-shadow: 0 1px 2px 0 rgb(0 0 0 / 0.05);
    }
    .input-field:focus {
        outline: none;
        --tw-ring-color: #6366F1;
        border-color: #6366F1;
    }
</style>